name: CI/CD with Terraform and EC2 Deployment

on:
  push:
    branches:
      - development
  workflow_dispatch:
    inputs:
      environment:
        description: "Ambiente (dev, test, prod)"
        required: true
        default: "dev"

jobs:
  terraform:
    name: Apply Terraform
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve -var-file="environments/${{ github.event.inputs.environment || 'dev' }}.tfvars"

  build-and-deploy:
    name: Build Docker Image and Deploy to EC2
    needs: terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install -r app/requirements.txt

      - name: Run lint
        run: flake8 app/

      - name: Run tests
        run: pytest app/

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/flask-app:latest

      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            if [ ! -d "flask-app" ]; then
              git clone https://github.com/cristianquin/CI-CD.git flask-app
            fi
            cd flask-app
            git pull origin development
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker pull ${{ secrets.DOCKER_USERNAME }}/flask-app:latest
            docker-compose down
            docker-compose up -d
