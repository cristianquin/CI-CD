name: CI/CD Pipeline

on:
  push:
    branches: [ development ]

jobs:
  build-test-lint:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:14
        env:
          POSTGRES_DB: mydb
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U user -d mydb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install -r app/requirements.txt
          pip install flake8 pytest

      - name: Run lint
        run: flake8 app/

      - name: Esperar a que PostgreSQL est√© listo
        run: |
          for i in {1..10}; do
            pg_isready -h localhost -U user -d mydb && break
            echo "Esperando a PostgreSQL..."
            sleep 3
          done
        env:
          PGPASSWORD: password

      - name: Run tests
        run: DB_HOST=localhost pytest app/

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/flask-app:latest

  deploy:
    needs: build-test-lint
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd flask-app
            pwd
            ls -la
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker pull ${{ secrets.DOCKER_USERNAME }}/flask-app:latest
            docker-compose down
            docker-compose up -d
